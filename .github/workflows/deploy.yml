name: Deploy Python Package

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install requests paramiko

      - name: Get package version and name
        id: get_package_info
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PKG_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pkg_name=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "Package name: $PKG_NAME"
          echo "Package version: $VERSION"

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Check and delete existing version via SSH (using Python)
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          python - <<EOF
          import paramiko
          import os

          hostname = os.environ["VM_HOST"]
          username = os.environ["VM_USERNAME"]
          password = os.environ["SSH_PASSWORD"]
          package_name = "${{ steps.get_package_info.outputs.pkg_name }}"
          package_version = "${{ steps.get_package_info.outputs.version }}"

          whl_file = f"{package_name}-{package_version}-py3-none-any.whl"
          tar_file = f"{package_name}-{package_version}.tar.gz"

          ssh = paramiko.SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(hostname, username=username, password=password)

          cmd = f"""
          cd /root/pypi_packages &&
          if [ -f "{whl_file}" ] || [ -f "{tar_file}" ]; then
              rm -f "{whl_file}" "{tar_file}";
              echo "Deleted existing package files";
          else
              echo "No existing package files found";
          fi
          """

          stdin, stdout, stderr = ssh.exec_command(cmd)
          print(stdout.read().decode())
          print(stderr.read().decode())

          ssh.close()
          EOF

      - name: Build package
        run: uv build

      - name: Upload package
        env:
          UV_PUBLISH_USERNAME: ${{ secrets.PYPI_USERNAME }}
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: uv publish --index kairosresearch
